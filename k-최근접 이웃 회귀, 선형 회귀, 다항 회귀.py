# -*- coding: utf-8 -*-
"""기계학습.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t8YKjvxN1FxAjKTYV3dWKajYAXyey5Fe
"""

import numpy as np

perch_length = np.array(
    [8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0,
     21.0, 21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5,
     22.5, 22.7, 23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5,
     27.3, 27.5, 27.5, 27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0,
     36.5, 36.0, 37.0, 37.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0,
     40.0, 42.0, 43.0, 43.0, 43.5, 44.0])

perch_weight = np.array(
    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0,
     110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0,
     130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0,
     197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0,
     514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0,
     820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0,
     1000.0, 1000.0])

#k-최근접 이웃 회귀
import matplotlib.pyplot as plt

plt.scatter(perch_length, perch_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(perch_length,
                                                                      perch_weight,
                                                                      random_state=42)

#훈련 세트와 테스트 세트를 2차원 배열로 바꿈
train_input = train_input.reshape(-1,1)
test_input = test_input.reshape(-1,1)

print(train_input)
print(test_input)

from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor(n_neighbors=3)

#k-최근접 이웃 회귀 모델을 훈련한다.
knr.fit(train_input, train_target)

#KNeighborsRegressor(n_neighbors=5)
print(knr.predict([[50]]))

from scipy.spatial import distance
#50센티 이상의 이웃
distances, indexes = knr.kneighbors([[50]])

#학습 세트의 산점도
plt.scatter(train_input, train_target)
#학습 세트 중에서 이웃 샘플만 다시 그림
plt.scatter(train_input[indexes], train_target[indexes], marker='D')
#50센티 데이터
plt.scatter(50,1033,marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(np.mean(train_target[indexes])) #회귀 모델 예측값과 동일

#길이를 늘려서 예측 결과를 알아봄

#100센티 이상의 이웃
distances, indexes = knr.kneighbors([[100]])
#학습 세트의 산점도
plt.scatter(train_input, train_target)
#학습 세트 중에서 이웃 샘플만 다시 그림
plt.scatter(train_input[indexes], train_target[indexes], marker='D')
#100센티 데이터
plt.scatter(100,1033,marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

#선형 회귀
from sklearn.linear_model import LinearRegression

lr = LinearRegression()

#선형 회귀 모델을 학습
lr.fit(train_input, train_target)

#50센티 데이터를 예측
print(lr.predict([[50]]))

print(lr.coef_, lr.intercept_)

#학습 데이터셋의 산점도
plt.scatter(train_input, train_target)

#길이 15에서 50까지 1차 방정식 그래프를 그린다
plt.plot([15,50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])

#50센티 데이터
plt.scatter(50, 1241.8, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(lr.score(train_input, train_target)) #학습 세트
print(lr.score(test_input, test_target)) #테스트 세트

from sklearn.metrics import mean_absolute_error

test_prediction = lr.predict(test_input)
mae = mean_absolute_error(test_target, test_prediction)

print(mae)

#다항 회귀
train_poly = np.column_stack((train_input ** 2, train_input))
test_poly = np.column_stack((test_input ** 2, test_input))

print(train_poly.shape, test_poly.shape) #새롭게 만든 데이터셋 크기

train_poly

lr = LinearRegression()
lr.fit(train_poly, train_target)

print(lr.predict([[50**2, 50]]))

print(lr.coef_, lr.intercept_)

#구간별 직선을 그리기 위해 15에서 49까지 정수 배열을 구성
point = np.arange(15,50)

#훈련 세트의 산점도
plt.scatter(train_input, train_target)
plt.plot(point, 1.01*point**2 - 21.6*point + 116.05)

#50센티 데이터 표현
plt.scatter([50],[1574], marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target))