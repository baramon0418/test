# -*- coding: utf-8 -*-
"""기계학습.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v5A-_qhn4AMm5Vm-qxdBRgnxCNHZZJs1
"""

import tensorflow as tf
print(tf.__version__)

mnist = tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()

print(x_train[0])
print(y_train[0])

x_train,x_test=x_train/255.0,x_test/255.0
print(x_train[0])

model=tf.keras.models.Sequential([
   tf.keras.layers.Flatten(input_shape=(28,28)),
   tf.keras.layers.Dense(512,activation=tf.nn.relu),
   tf.keras.layers.Dense(10,activation=tf.nn.softmax)                               
])
model.summary()

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train,y_train,epochs=5)

test_loss, test_accuracy=model.evaluate(x_test,y_test)
print('테스트 정확도:',test_accuracy)

import tensorflow as tf

imdb=tf.keras.datasets.imdb
(train_data,train_labels),(test_data,test_labels)=imdb.load_data(num_words=10000)

print(train_data[0])
print(train_labels[0])

print(train_data.shape)
print(test_data.shape)

word_index=imdb.get_word_index()
reverse_word_index= dict([(value,key) for (key,value) in word_index.items()])
decoded_review=' '.join([reverse_word_index.get(i-3,'?') for i in train_data[11]])
print(decoded_review)

import numpy as np

def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences),dimension))

    for i, sequence in enumerate(sequences):
        results[i,sequence] = 1.
    return results

x_train=vectorize_sequences(train_data)
x_test=vectorize_sequences(test_data)

print(x_train[0][:15])

y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

print(y_train[0:15])

from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(16,activation='relu',input_shape=(10000,)))
model.add(layers.Dense(16,activation='relu'))
model.add(layers.Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['accuracy'])

x_val=x_train[:10000]
partial_x_train=x_train[10000:]

y_val=y_train[:10000]
partial_y_train=y_train[10000:]

print(partial_x_train[0])
print(partial_y_train[0])

history = model.fit(partial_x_train,
                    partial_y_train,
                    epochs=20,
                    batch_size=512,
                    validation_data=(x_val,y_val))

history_dict = history.history

import matplotlib.pyplot as plt

history_dict = history.history
accuracy = history_dict['accuracy']
val_accuracy = history_dict['val_accuracy']

epochs=range(1,len(accuracy)+1)

plt.plot(epochs, accuracy, 'r', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='valadation accuracy')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.show()

history_dict = history.history
loss = history_dict['loss']
val_loss = history_dict['val_loss']

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Valadation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

history = model.fit(partial_x_train,
                    partial_y_train,
                    epochs=4,
                    batch_size=512,
                    validation_data=(x_val,y_val))

print(model.evaluate(x_test,y_test))

