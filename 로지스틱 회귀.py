# -*- coding: utf-8 -*-
"""기계학습.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WLmEO7GeFlfLoSJGfHleX4pl5M_yWb7a
"""

#로지스틱 회귀
import pandas as pd

fish = pd.read_csv('https://bit.ly/fish_csv_data')
fish

print(pd.unique(fish['Species']))

fish_input=fish[['Weight','Length','Diagonal','Height','Width']].to_numpy()
print(fish_input[:10])

fish_target=fish['Species'].to_numpy()
print(fish_target)

from sklearn.model_selection import train_test_split

train_input,test_input,train_target,test_target=train_test_split(fish_input,fish_target,random_state=42)

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()
ss.fit(train_input)
train_scaled=ss.transform(train_input)
test_scaled=ss.transform(test_input)

import numpy as np
import matplotlib.pyplot as plt

z=np.arange(-5,5,0.1)
phi=1/(1+np.exp(-z))

plt.plot(z,phi)
plt.xlabel('z')
plt.ylabel('phi')
plt.show()

char_arr=np.array(['A','B','C','D','E'])
print(char_arr[[True,False,True,False,False]])

bream_smelt_indexes=(train_target=='Bream')|(train_target=='Smelt')
train_bream_smelt=train_scaled[bream_smelt_indexes]
target_bream_smelt=train_target[bream_smelt_indexes]

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()
lr.fit(train_bream_smelt,target_bream_smelt)

print(lr.predict(train_bream_smelt[:5]))
print(lr.predict_proba(train_bream_smelt[:5]))

print(lr.classes_)
print(lr.coef_,lr.intercept_)

decisions=lr.decision_function(train_bream_smelt[:5])
print(decisions)

from scipy.special import expit
print(expit(decisions))

lr=LogisticRegression(C=20,max_iter=1000)
lr.fit(train_scaled,train_target)

print(lr.score(train_scaled,train_target))
print(lr.score(test_scaled,test_target))

print(lr.predict(test_scaled))
proba=lr.predict_proba(test_scaled)
print(np.round(proba,decimals=3))

print(lr.classes_)
print(lr.coef_.shape,lr.intercept_.shape)

decision=lr.decision_function(test_scaled[:5])
print(np.round(decision,decimals=2))

from scipy.special import softmax

proba=softmax(decision,axis=1)
print(np.round(proba,decimals=3))

